#pragma GCC diagnostic push
/**
 * This file was automatically generated by nk-gen-c.
 * The following copyright applies to the portions of nk-gen-c located in this file:
 * (C) 2024 AO Kaspersky Lab. All Rights Reserved.
 */

#include <nk/transport.h>
#include <nk/types.h>
#include <nk/layout.h>
#ifndef __NK_ASSERT___NK_SIZEOF_NK_HANDLE_DESC_T_IS_16
#define __NK_ASSERT___NK_SIZEOF_NK_HANDLE_DESC_T_IS_16
nk_static_assert(__NK_SIZEOF_NK_HANDLE_DESC_T == 16, __NK_ASSERT___NK_SIZEOF_NK_HANDLE_DESC_T_IS_16_FAIL);
#endif
#ifndef __NK_ASSERT___NK_ALIGNOF_NK_HANDLE_DESC_T_IS_8
#define __NK_ASSERT___NK_ALIGNOF_NK_HANDLE_DESC_T_IS_8
nk_static_assert(__NK_ALIGNOF_NK_HANDLE_DESC_T == 8, __NK_ASSERT___NK_ALIGNOF_NK_HANDLE_DESC_T_IS_8_FAIL);
#endif
#ifndef __NK_ASSERT___NK_SIZEOF_NK_PTR_T_IS_8
#define __NK_ASSERT___NK_SIZEOF_NK_PTR_T_IS_8
nk_static_assert(__NK_SIZEOF_NK_PTR_T == 8, __NK_ASSERT___NK_SIZEOF_NK_PTR_T_IS_8_FAIL);
#endif
#ifndef __NK_ASSERT___NK_ALIGNOF_NK_PTR_T_IS_4
#define __NK_ASSERT___NK_ALIGNOF_NK_PTR_T_IS_4
nk_static_assert(__NK_ALIGNOF_NK_PTR_T == 4, __NK_ASSERT___NK_ALIGNOF_NK_PTR_T_IS_4_FAIL);
#endif
#ifndef __NK_ASSERT___NK_SIZEOF_NK_MESSAGE_IS_24
#define __NK_ASSERT___NK_SIZEOF_NK_MESSAGE_IS_24
nk_static_assert(__NK_SIZEOF_NK_MESSAGE == 24, __NK_ASSERT___NK_SIZEOF_NK_MESSAGE_IS_24_FAIL);
#endif
#ifndef __NK_ASSERT___NK_ALIGNOF_NK_MESSAGE_IS_8
#define __NK_ASSERT___NK_ALIGNOF_NK_MESSAGE_IS_8
nk_static_assert(__NK_ALIGNOF_NK_MESSAGE == 8, __NK_ASSERT___NK_ALIGNOF_NK_MESSAGE_IS_8_FAIL);
#endif
#ifndef __NK_ASSERT___NK_MESSAGE_SIZE_MAX_IS_8388607
#define __NK_ASSERT___NK_MESSAGE_SIZE_MAX_IS_8388607
nk_static_assert(__NK_MESSAGE_SIZE_MAX == 8388607, __NK_ASSERT___NK_MESSAGE_SIZE_MAX_IS_8388607_FAIL);
#endif
#ifndef __NK_ASSERT___NK_MESSAGE_HANDLES_MAX_IS_255
#define __NK_ASSERT___NK_MESSAGE_HANDLES_MAX_IS_255
nk_static_assert(__NK_MESSAGE_HANDLES_MAX == 255, __NK_ASSERT___NK_MESSAGE_HANDLES_MAX_IS_255_FAIL);
#endif
#ifndef __NK_ASSERT___NK_IID_MAX_IS_65535
#define __NK_ASSERT___NK_IID_MAX_IS_65535
nk_static_assert(__NK_IID_MAX == 65535, __NK_ASSERT___NK_IID_MAX_IS_65535_FAIL);
#endif
#ifndef __NK_ASSERT___NK_MID_MAX_IS_65535
#define __NK_ASSERT___NK_MID_MAX_IS_65535
nk_static_assert(__NK_MID_MAX == 65535, __NK_ASSERT___NK_MID_MAX_IS_65535_FAIL);
#endif

#ifndef __NK_GEN_CPP_MANGLE
#  ifdef __cplusplus
#    define __NK_GEN_CPP_MANGLE(name) name ## _
#  else
#    define __NK_GEN_CPP_MANGLE(name) name
#  endif
#endif

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef ____Einit__COMPONENT_ENDPOINTS__
#define ____Einit__COMPONENT_ENDPOINTS__
enum {
    Einit_iidMax,
};
enum {
    Einit_iidOffset = 0,
};
enum {
    Einit_securityIidMax,
};
enum {
    Einit_component_req_arena_size = 0,
    Einit_component_res_arena_size = 0,
    Einit_component_req_handles = 0,
    Einit_component_res_handles = 0,
    Einit_component_err_handles = 0,
};

#endif /* ____Einit__COMPONENT_ENDPOINTS__ */

#ifndef ____Einit__TASK_ENDPOINTS__
#define ____Einit__TASK_ENDPOINTS__
enum {
    Einit_entity_req_arena_size =
    Einit_component_req_arena_size,
    Einit_entity_res_arena_size =
    Einit_component_res_arena_size,
    Einit_entity_req_handles =
    Einit_component_req_handles,
    Einit_entity_res_handles =
    Einit_component_res_handles,
    Einit_entity_err_handles =
    Einit_component_err_handles,
};

#endif /* ____Einit__TASK_ENDPOINTS__ */

#ifdef __cplusplus
    }
#endif

#pragma GCC diagnostic pop

