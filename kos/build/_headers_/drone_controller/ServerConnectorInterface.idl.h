#pragma GCC diagnostic push
/**
 * This file was automatically generated by nk-gen-c.
 * The following copyright applies to the portions of nk-gen-c located in this file:
 * (C) 2024 AO Kaspersky Lab. All Rights Reserved.
 */

#include <nk/transport.h>
#include <nk/types.h>
#include <nk/layout.h>
#ifndef __NK_ASSERT___NK_SIZEOF_NK_HANDLE_DESC_T_IS_16
#define __NK_ASSERT___NK_SIZEOF_NK_HANDLE_DESC_T_IS_16
nk_static_assert(__NK_SIZEOF_NK_HANDLE_DESC_T == 16, __NK_ASSERT___NK_SIZEOF_NK_HANDLE_DESC_T_IS_16_FAIL);
#endif
#ifndef __NK_ASSERT___NK_ALIGNOF_NK_HANDLE_DESC_T_IS_8
#define __NK_ASSERT___NK_ALIGNOF_NK_HANDLE_DESC_T_IS_8
nk_static_assert(__NK_ALIGNOF_NK_HANDLE_DESC_T == 8, __NK_ASSERT___NK_ALIGNOF_NK_HANDLE_DESC_T_IS_8_FAIL);
#endif
#ifndef __NK_ASSERT___NK_SIZEOF_NK_PTR_T_IS_8
#define __NK_ASSERT___NK_SIZEOF_NK_PTR_T_IS_8
nk_static_assert(__NK_SIZEOF_NK_PTR_T == 8, __NK_ASSERT___NK_SIZEOF_NK_PTR_T_IS_8_FAIL);
#endif
#ifndef __NK_ASSERT___NK_ALIGNOF_NK_PTR_T_IS_4
#define __NK_ASSERT___NK_ALIGNOF_NK_PTR_T_IS_4
nk_static_assert(__NK_ALIGNOF_NK_PTR_T == 4, __NK_ASSERT___NK_ALIGNOF_NK_PTR_T_IS_4_FAIL);
#endif
#ifndef __NK_ASSERT___NK_SIZEOF_NK_MESSAGE_IS_24
#define __NK_ASSERT___NK_SIZEOF_NK_MESSAGE_IS_24
nk_static_assert(__NK_SIZEOF_NK_MESSAGE == 24, __NK_ASSERT___NK_SIZEOF_NK_MESSAGE_IS_24_FAIL);
#endif
#ifndef __NK_ASSERT___NK_ALIGNOF_NK_MESSAGE_IS_8
#define __NK_ASSERT___NK_ALIGNOF_NK_MESSAGE_IS_8
nk_static_assert(__NK_ALIGNOF_NK_MESSAGE == 8, __NK_ASSERT___NK_ALIGNOF_NK_MESSAGE_IS_8_FAIL);
#endif
#ifndef __NK_ASSERT___NK_MESSAGE_SIZE_MAX_IS_8388607
#define __NK_ASSERT___NK_MESSAGE_SIZE_MAX_IS_8388607
nk_static_assert(__NK_MESSAGE_SIZE_MAX == 8388607, __NK_ASSERT___NK_MESSAGE_SIZE_MAX_IS_8388607_FAIL);
#endif
#ifndef __NK_ASSERT___NK_MESSAGE_HANDLES_MAX_IS_255
#define __NK_ASSERT___NK_MESSAGE_HANDLES_MAX_IS_255
nk_static_assert(__NK_MESSAGE_HANDLES_MAX == 255, __NK_ASSERT___NK_MESSAGE_HANDLES_MAX_IS_255_FAIL);
#endif
#ifndef __NK_ASSERT___NK_IID_MAX_IS_65535
#define __NK_ASSERT___NK_IID_MAX_IS_65535
nk_static_assert(__NK_IID_MAX == 65535, __NK_ASSERT___NK_IID_MAX_IS_65535_FAIL);
#endif
#ifndef __NK_ASSERT___NK_MID_MAX_IS_65535
#define __NK_ASSERT___NK_MID_MAX_IS_65535
nk_static_assert(__NK_MID_MAX == 65535, __NK_ASSERT___NK_MID_MAX_IS_65535_FAIL);
#endif

#ifndef __NK_GEN_CPP_MANGLE
#  ifdef __cplusplus
#    define __NK_GEN_CPP_MANGLE(name) name ## _
#  else
#    define __NK_GEN_CPP_MANGLE(name) name
#  endif
#endif

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef ____nk_ptr_t__NKTYPE__
#define ____nk_ptr_t__NKTYPE__
nk_static_assert(sizeof(nk_ptr_t) == 8, bad_nk_ptr_t_size);
nk_static_assert(nk_alignof(nk_ptr_t) == 4, bad_nk_ptr_t_align);

#endif /* ____nk_ptr_t__NKTYPE__ */

#ifndef ____UInt16__RAWTYPE__
#define ____UInt16__RAWTYPE__
nk_static_assert(sizeof(nk_uint16_t) == 2, bad_nk_uint16_t_size);
nk_static_assert(nk_alignof(nk_uint16_t) == 2, bad_nk_uint16_t_align);

#endif /* ____UInt16__RAWTYPE__ */

#ifndef ____UInt8__RAWTYPE__
#define ____UInt8__RAWTYPE__
nk_static_assert(sizeof(nk_uint8_t) == 1, bad_nk_uint8_t_size);
nk_static_assert(nk_alignof(nk_uint8_t) == 1, bad_nk_uint8_t_align);

#endif /* ____UInt8__RAWTYPE__ */

#ifndef __drone_controller_ServerConnectorInterface__MaxIdLength__CONST__
#define __drone_controller_ServerConnectorInterface__MaxIdLength__CONST__
#define drone_controller_ServerConnectorInterface_MaxIdLength ((nk_uint16_t)(NK_UINT16_C(32)))
#ifdef NK_USE_UNQUALIFIED_NAMES
#define ServerConnectorInterface_MaxIdLength drone_controller_ServerConnectorInterface_MaxIdLength
#endif /* NK_USE_UNQUALIFIED_NAMES */

#endif /* __drone_controller_ServerConnectorInterface__MaxIdLength__CONST__ */

#ifndef __drone_controller_ServerConnectorInterface__MaxPublicationLength__CONST__
#define __drone_controller_ServerConnectorInterface__MaxPublicationLength__CONST__
#define drone_controller_ServerConnectorInterface_MaxPublicationLength ((nk_uint16_t)(NK_UINT16_C(1024)))
#ifdef NK_USE_UNQUALIFIED_NAMES
#define ServerConnectorInterface_MaxPublicationLength drone_controller_ServerConnectorInterface_MaxPublicationLength
#endif /* NK_USE_UNQUALIFIED_NAMES */

#endif /* __drone_controller_ServerConnectorInterface__MaxPublicationLength__CONST__ */

#ifndef __drone_controller_ServerConnectorInterface__MaxQueryLength__CONST__
#define __drone_controller_ServerConnectorInterface__MaxQueryLength__CONST__
#define drone_controller_ServerConnectorInterface_MaxQueryLength ((nk_uint16_t)(NK_UINT16_C(1024)))
#ifdef NK_USE_UNQUALIFIED_NAMES
#define ServerConnectorInterface_MaxQueryLength drone_controller_ServerConnectorInterface_MaxQueryLength
#endif /* NK_USE_UNQUALIFIED_NAMES */

#endif /* __drone_controller_ServerConnectorInterface__MaxQueryLength__CONST__ */

#ifndef __drone_controller_ServerConnectorInterface__MaxResponseLength__CONST__
#define __drone_controller_ServerConnectorInterface__MaxResponseLength__CONST__
#define drone_controller_ServerConnectorInterface_MaxResponseLength ((nk_uint16_t)(NK_UINT16_C(4096)))
#ifdef NK_USE_UNQUALIFIED_NAMES
#define ServerConnectorInterface_MaxResponseLength drone_controller_ServerConnectorInterface_MaxResponseLength
#endif /* NK_USE_UNQUALIFIED_NAMES */

#endif /* __drone_controller_ServerConnectorInterface__MaxResponseLength__CONST__ */

#ifndef __drone_controller_ServerConnectorInterface__MaxTopicLength__CONST__
#define __drone_controller_ServerConnectorInterface__MaxTopicLength__CONST__
#define drone_controller_ServerConnectorInterface_MaxTopicLength ((nk_uint16_t)(NK_UINT16_C(64)))
#ifdef NK_USE_UNQUALIFIED_NAMES
#define ServerConnectorInterface_MaxTopicLength drone_controller_ServerConnectorInterface_MaxTopicLength
#endif /* NK_USE_UNQUALIFIED_NAMES */

#endif /* __drone_controller_ServerConnectorInterface__MaxTopicLength__CONST__ */

#ifndef __drone_controller__ServerConnectorInterface__INTERFACE__
#define __drone_controller__ServerConnectorInterface__INTERFACE__
enum {
    drone_controller_ServerConnectorInterface_GetBoardId_mid,
    drone_controller_ServerConnectorInterface_SendRequest_mid,
    drone_controller_ServerConnectorInterface_PublishMessage_mid,
    drone_controller_ServerConnectorInterface_mid_max,
};
enum {
    drone_controller_ServerConnectorInterface_GetBoardId_res_id_size =
    33,
    drone_controller_ServerConnectorInterface_GetBoardId_req_arena_size =
    0,
    drone_controller_ServerConnectorInterface_GetBoardId_res_arena_size =
    33,
    drone_controller_ServerConnectorInterface_GetBoardId_req_handles =
    0,
    drone_controller_ServerConnectorInterface_GetBoardId_res_handles =
    0,
    drone_controller_ServerConnectorInterface_GetBoardId_err_handles =
    0,
    drone_controller_ServerConnectorInterface_SendRequest_req_query_size =
    1025,
    drone_controller_ServerConnectorInterface_SendRequest_res_response_size =
    4097,
    drone_controller_ServerConnectorInterface_SendRequest_req_arena_size =
    1025,
    drone_controller_ServerConnectorInterface_SendRequest_res_arena_size =
    4097,
    drone_controller_ServerConnectorInterface_SendRequest_req_handles =
    0,
    drone_controller_ServerConnectorInterface_SendRequest_res_handles =
    0,
    drone_controller_ServerConnectorInterface_SendRequest_err_handles =
    0,
    drone_controller_ServerConnectorInterface_PublishMessage_req_topic_size =
    65,
    drone_controller_ServerConnectorInterface_PublishMessage_req_publication_size =
    1025,
    drone_controller_ServerConnectorInterface_PublishMessage_req_arena_size =
    1090,
    drone_controller_ServerConnectorInterface_PublishMessage_res_arena_size =
    0,
    drone_controller_ServerConnectorInterface_PublishMessage_req_handles =
    0,
    drone_controller_ServerConnectorInterface_PublishMessage_res_handles =
    0,
    drone_controller_ServerConnectorInterface_PublishMessage_err_handles =
    0,
    drone_controller_ServerConnectorInterface_req_arena_size =
    1090,
    drone_controller_ServerConnectorInterface_res_arena_size =
    4097,
    drone_controller_ServerConnectorInterface_req_handles =
    0,
    drone_controller_ServerConnectorInterface_res_handles =
    0,
    drone_controller_ServerConnectorInterface_err_handles =
    0,
};
typedef struct __nk_packed drone_controller_ServerConnectorInterface_GetBoardId_req {
            __nk_alignas(8)
            struct nk_message base_;
        }
drone_controller_ServerConnectorInterface_GetBoardId_req;
nk_static_assert(sizeof(drone_controller_ServerConnectorInterface_GetBoardId_req) == 24, bad_drone_controller_ServerConnectorInterface_GetBoardId_req_size);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_GetBoardId_req, base_) == 0, bad_drone_controller_ServerConnectorInterface_GetBoardId_req_base__offset);
#pragma pack(push, 8) /* drone_controller_ServerConnectorInterface_GetBoardId_res */
typedef struct drone_controller_ServerConnectorInterface_GetBoardId_err {
            __nk_alignas(8)
            struct nk_message base_;
        }
drone_controller_ServerConnectorInterface_GetBoardId_err;
nk_static_assert(sizeof(drone_controller_ServerConnectorInterface_GetBoardId_err) == 24, bad_drone_controller_ServerConnectorInterface_GetBoardId_err_size);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_GetBoardId_err, base_) == 0, bad_drone_controller_ServerConnectorInterface_GetBoardId_err_base__offset);
typedef struct drone_controller_ServerConnectorInterface_GetBoardId_res {
            union {
                struct {
                    __nk_alignas(8)
                    struct nk_message base_;
                    __nk_alignas(1)
                    nk_uint8_t success;
                    __nk_alignas(4) nk_ptr_t id;
                };
                struct {
                    __nk_alignas(8)
                    struct nk_message base_;
                    __nk_alignas(1)
                    nk_uint8_t success;
                    __nk_alignas(4) nk_ptr_t id;
                } res_;
                struct drone_controller_ServerConnectorInterface_GetBoardId_err err_;
            };
        }
drone_controller_ServerConnectorInterface_GetBoardId_res;
nk_static_assert(sizeof(drone_controller_ServerConnectorInterface_GetBoardId_res) == 40, bad_drone_controller_ServerConnectorInterface_GetBoardId_res_size);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_GetBoardId_res, base_) == 0, bad_drone_controller_ServerConnectorInterface_GetBoardId_res_base__offset);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_GetBoardId_res, success) == 24, bad_drone_controller_ServerConnectorInterface_GetBoardId_res_success_offset);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_GetBoardId_res, id) == 28, bad_drone_controller_ServerConnectorInterface_GetBoardId_res_id_offset);
#pragma pack(pop) /* drone_controller_ServerConnectorInterface_GetBoardId_res */
typedef struct __nk_packed drone_controller_ServerConnectorInterface_SendRequest_req {
            __nk_alignas(8)
            struct nk_message base_;
            __nk_alignas(4) nk_ptr_t query;
        }
drone_controller_ServerConnectorInterface_SendRequest_req;
nk_static_assert(sizeof(drone_controller_ServerConnectorInterface_SendRequest_req) == 32, bad_drone_controller_ServerConnectorInterface_SendRequest_req_size);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_SendRequest_req, base_) == 0, bad_drone_controller_ServerConnectorInterface_SendRequest_req_base__offset);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_SendRequest_req, query) == 24, bad_drone_controller_ServerConnectorInterface_SendRequest_req_query_offset);
#pragma pack(push, 8) /* drone_controller_ServerConnectorInterface_SendRequest_res */
typedef struct drone_controller_ServerConnectorInterface_SendRequest_err {
            __nk_alignas(8)
            struct nk_message base_;
        }
drone_controller_ServerConnectorInterface_SendRequest_err;
nk_static_assert(sizeof(drone_controller_ServerConnectorInterface_SendRequest_err) == 24, bad_drone_controller_ServerConnectorInterface_SendRequest_err_size);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_SendRequest_err, base_) == 0, bad_drone_controller_ServerConnectorInterface_SendRequest_err_base__offset);
typedef struct drone_controller_ServerConnectorInterface_SendRequest_res {
            union {
                struct {
                    __nk_alignas(8)
                    struct nk_message base_;
                    __nk_alignas(1)
                    nk_uint8_t success;
                    __nk_alignas(4)
                    nk_ptr_t response;
                };
                struct {
                    __nk_alignas(8)
                    struct nk_message base_;
                    __nk_alignas(1)
                    nk_uint8_t success;
                    __nk_alignas(4)
                    nk_ptr_t response;
                } res_;
                struct drone_controller_ServerConnectorInterface_SendRequest_err err_;
            };
        }
drone_controller_ServerConnectorInterface_SendRequest_res;
nk_static_assert(sizeof(drone_controller_ServerConnectorInterface_SendRequest_res) == 40, bad_drone_controller_ServerConnectorInterface_SendRequest_res_size);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_SendRequest_res, base_) == 0, bad_drone_controller_ServerConnectorInterface_SendRequest_res_base__offset);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_SendRequest_res, success) == 24, bad_drone_controller_ServerConnectorInterface_SendRequest_res_success_offset);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_SendRequest_res, response) == 28, bad_drone_controller_ServerConnectorInterface_SendRequest_res_response_offset);
#pragma pack(pop) /* drone_controller_ServerConnectorInterface_SendRequest_res */
typedef struct __nk_packed drone_controller_ServerConnectorInterface_PublishMessage_req {
            __nk_alignas(8)
            struct nk_message base_;
            __nk_alignas(4) nk_ptr_t topic;
            __nk_alignas(4) nk_ptr_t publication;
        }
drone_controller_ServerConnectorInterface_PublishMessage_req;
nk_static_assert(sizeof(drone_controller_ServerConnectorInterface_PublishMessage_req) == 40, bad_drone_controller_ServerConnectorInterface_PublishMessage_req_size);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_PublishMessage_req, base_) == 0, bad_drone_controller_ServerConnectorInterface_PublishMessage_req_base__offset);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_PublishMessage_req, topic) == 24, bad_drone_controller_ServerConnectorInterface_PublishMessage_req_topic_offset);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_PublishMessage_req, publication) == 32, bad_drone_controller_ServerConnectorInterface_PublishMessage_req_publication_offset);
#pragma pack(push, 8) /* drone_controller_ServerConnectorInterface_PublishMessage_res */
typedef struct drone_controller_ServerConnectorInterface_PublishMessage_err {
            __nk_alignas(8)
            struct nk_message base_;
        }
drone_controller_ServerConnectorInterface_PublishMessage_err;
nk_static_assert(sizeof(drone_controller_ServerConnectorInterface_PublishMessage_err) == 24, bad_drone_controller_ServerConnectorInterface_PublishMessage_err_size);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_PublishMessage_err, base_) == 0, bad_drone_controller_ServerConnectorInterface_PublishMessage_err_base__offset);
typedef struct drone_controller_ServerConnectorInterface_PublishMessage_res {
            union {
                struct {
                    __nk_alignas(8)
                    struct nk_message base_;
                    __nk_alignas(1)
                    nk_uint8_t success;
                };
                struct {
                    __nk_alignas(8)
                    struct nk_message base_;
                    __nk_alignas(1)
                    nk_uint8_t success;
                } res_;
                struct drone_controller_ServerConnectorInterface_PublishMessage_err err_;
            };
        }
drone_controller_ServerConnectorInterface_PublishMessage_res;
nk_static_assert(sizeof(drone_controller_ServerConnectorInterface_PublishMessage_res) == 32, bad_drone_controller_ServerConnectorInterface_PublishMessage_res_size);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_PublishMessage_res, base_) == 0, bad_drone_controller_ServerConnectorInterface_PublishMessage_res_base__offset);
nk_static_assert(nk_offsetof(drone_controller_ServerConnectorInterface_PublishMessage_res, success) == 24, bad_drone_controller_ServerConnectorInterface_PublishMessage_res_success_offset);
#pragma pack(pop) /* drone_controller_ServerConnectorInterface_PublishMessage_res */
#ifdef NK_USE_UNQUALIFIED_NAMES
#define ServerConnectorInterface_GetBoardId_mid drone_controller_ServerConnectorInterface_GetBoardId_mid
#define ServerConnectorInterface_SendRequest_mid drone_controller_ServerConnectorInterface_SendRequest_mid
#define ServerConnectorInterface_PublishMessage_mid drone_controller_ServerConnectorInterface_PublishMessage_mid
#define ServerConnectorInterface_mid_max drone_controller_ServerConnectorInterface_mid_max
#define ServerConnectorInterface_GetBoardId_res_id_size drone_controller_ServerConnectorInterface_GetBoardId_res_id_size
#define ServerConnectorInterface_GetBoardId_req_arena_size drone_controller_ServerConnectorInterface_GetBoardId_req_arena_size
#define ServerConnectorInterface_GetBoardId_res_arena_size drone_controller_ServerConnectorInterface_GetBoardId_res_arena_size
#define ServerConnectorInterface_GetBoardId_req_handles drone_controller_ServerConnectorInterface_GetBoardId_req_handles
#define ServerConnectorInterface_GetBoardId_res_handles drone_controller_ServerConnectorInterface_GetBoardId_res_handles
#define ServerConnectorInterface_GetBoardId_err_handles drone_controller_ServerConnectorInterface_GetBoardId_err_handles
#define ServerConnectorInterface_SendRequest_req_query_size drone_controller_ServerConnectorInterface_SendRequest_req_query_size
#define ServerConnectorInterface_SendRequest_res_response_size drone_controller_ServerConnectorInterface_SendRequest_res_response_size
#define ServerConnectorInterface_SendRequest_req_arena_size drone_controller_ServerConnectorInterface_SendRequest_req_arena_size
#define ServerConnectorInterface_SendRequest_res_arena_size drone_controller_ServerConnectorInterface_SendRequest_res_arena_size
#define ServerConnectorInterface_SendRequest_req_handles drone_controller_ServerConnectorInterface_SendRequest_req_handles
#define ServerConnectorInterface_SendRequest_res_handles drone_controller_ServerConnectorInterface_SendRequest_res_handles
#define ServerConnectorInterface_SendRequest_err_handles drone_controller_ServerConnectorInterface_SendRequest_err_handles
#define ServerConnectorInterface_PublishMessage_req_topic_size drone_controller_ServerConnectorInterface_PublishMessage_req_topic_size
#define ServerConnectorInterface_PublishMessage_req_publication_size drone_controller_ServerConnectorInterface_PublishMessage_req_publication_size
#define ServerConnectorInterface_PublishMessage_req_arena_size drone_controller_ServerConnectorInterface_PublishMessage_req_arena_size
#define ServerConnectorInterface_PublishMessage_res_arena_size drone_controller_ServerConnectorInterface_PublishMessage_res_arena_size
#define ServerConnectorInterface_PublishMessage_req_handles drone_controller_ServerConnectorInterface_PublishMessage_req_handles
#define ServerConnectorInterface_PublishMessage_res_handles drone_controller_ServerConnectorInterface_PublishMessage_res_handles
#define ServerConnectorInterface_PublishMessage_err_handles drone_controller_ServerConnectorInterface_PublishMessage_err_handles
#define ServerConnectorInterface_req_arena_size drone_controller_ServerConnectorInterface_req_arena_size
#define ServerConnectorInterface_res_arena_size drone_controller_ServerConnectorInterface_res_arena_size
#define ServerConnectorInterface_req_handles drone_controller_ServerConnectorInterface_req_handles
#define ServerConnectorInterface_res_handles drone_controller_ServerConnectorInterface_res_handles
#define ServerConnectorInterface_err_handles drone_controller_ServerConnectorInterface_err_handles
#define ServerConnectorInterface_GetBoardId_req drone_controller_ServerConnectorInterface_GetBoardId_req
#define ServerConnectorInterface_GetBoardId_res drone_controller_ServerConnectorInterface_GetBoardId_res
#define ServerConnectorInterface_SendRequest_req drone_controller_ServerConnectorInterface_SendRequest_req
#define ServerConnectorInterface_SendRequest_res drone_controller_ServerConnectorInterface_SendRequest_res
#define ServerConnectorInterface_PublishMessage_req drone_controller_ServerConnectorInterface_PublishMessage_req
#define ServerConnectorInterface_PublishMessage_res drone_controller_ServerConnectorInterface_PublishMessage_res
#endif /* NK_USE_UNQUALIFIED_NAMES */

#endif /* __drone_controller__ServerConnectorInterface__INTERFACE__ */

#ifndef __drone_controller__ServerConnectorInterface__VTABLE__
#define __drone_controller__ServerConnectorInterface__VTABLE__
typedef struct drone_controller_ServerConnectorInterface {
            const
            struct drone_controller_ServerConnectorInterface_ops *ops;
        }
drone_controller_ServerConnectorInterface;
typedef nk_err_t
drone_controller_ServerConnectorInterface_GetBoardId_fn(struct drone_controller_ServerConnectorInterface *,
                                                        const
                                                        struct drone_controller_ServerConnectorInterface_GetBoardId_req *,
                                                        const
                                                        struct nk_arena *,
                                                        struct drone_controller_ServerConnectorInterface_GetBoardId_res *,
                                                        struct nk_arena *);
typedef nk_err_t
drone_controller_ServerConnectorInterface_SendRequest_fn(struct drone_controller_ServerConnectorInterface *,
                                                         const
                                                         struct drone_controller_ServerConnectorInterface_SendRequest_req *,
                                                         const
                                                         struct nk_arena *,
                                                         struct drone_controller_ServerConnectorInterface_SendRequest_res *,
                                                         struct nk_arena *);
typedef nk_err_t
drone_controller_ServerConnectorInterface_PublishMessage_fn(struct drone_controller_ServerConnectorInterface *,
                                                            const
                                                            struct drone_controller_ServerConnectorInterface_PublishMessage_req *,
                                                            const
                                                            struct nk_arena *,
                                                            struct drone_controller_ServerConnectorInterface_PublishMessage_res *,
                                                            struct nk_arena *);
typedef struct drone_controller_ServerConnectorInterface_ops {
            drone_controller_ServerConnectorInterface_GetBoardId_fn *GetBoardId;
            drone_controller_ServerConnectorInterface_SendRequest_fn *SendRequest;
            drone_controller_ServerConnectorInterface_PublishMessage_fn *PublishMessage;
        }
drone_controller_ServerConnectorInterface_ops;
#ifdef NK_USE_UNQUALIFIED_NAMES
#define ServerConnectorInterface_GetBoardId_fn drone_controller_ServerConnectorInterface_GetBoardId_fn
#define ServerConnectorInterface_SendRequest_fn drone_controller_ServerConnectorInterface_SendRequest_fn
#define ServerConnectorInterface_PublishMessage_fn drone_controller_ServerConnectorInterface_PublishMessage_fn
#define ServerConnectorInterface_ops drone_controller_ServerConnectorInterface_ops
#define ServerConnectorInterface drone_controller_ServerConnectorInterface
#endif /* NK_USE_UNQUALIFIED_NAMES */

#endif /* __drone_controller__ServerConnectorInterface__VTABLE__ */

#ifndef __drone_controller__ServerConnectorInterface__CLIENT__
#define __drone_controller__ServerConnectorInterface__CLIENT__
typedef struct drone_controller_ServerConnectorInterface_proxy {
            struct drone_controller_ServerConnectorInterface base;
            struct nk_transport *transport;
            nk_iid_t iid;
        }
drone_controller_ServerConnectorInterface_proxy;
static inline
nk_err_t drone_controller_ServerConnectorInterface_GetBoardId_proxy(struct drone_controller_ServerConnectorInterface_proxy *self,
                                                                    struct drone_controller_ServerConnectorInterface_GetBoardId_req *req,
                                                                    const
                                                                    struct nk_arena *req_arena,
                                                                    struct drone_controller_ServerConnectorInterface_GetBoardId_res *res,
                                                                    struct nk_arena *res_arena)
{
    nk_err_t rc;
    
    nk_assert(self != NK_NULL);
    nk_assert(req != NK_NULL);
    nk_assert(res != NK_NULL);
    nk_req_reset(req);
    nk_msg_set_method_id(req, self->iid,
                         drone_controller_ServerConnectorInterface_GetBoardId_mid);
    nk_msg_set_ncaps(req,
                     drone_controller_ServerConnectorInterface_GetBoardId_req_handles);
    nk_req_reset(res);
    nk_msg_set_method_id(res, self->iid,
                         drone_controller_ServerConnectorInterface_GetBoardId_mid);
    nk_msg_set_ncaps(res,
                     drone_controller_ServerConnectorInterface_GetBoardId_res_handles);
    rc = nk_transport_call(self->transport,
                           &req->base_, req_arena,
                           &res->base_,
                           res_arena);
    return rc;
}
static inline
nk_err_t drone_controller_ServerConnectorInterface_SendRequest_proxy(struct drone_controller_ServerConnectorInterface_proxy *self,
                                                                     struct drone_controller_ServerConnectorInterface_SendRequest_req *req,
                                                                     const
                                                                     struct nk_arena *req_arena,
                                                                     struct drone_controller_ServerConnectorInterface_SendRequest_res *res,
                                                                     struct nk_arena *res_arena)
{
    nk_err_t rc;
    
    nk_assert(self != NK_NULL);
    nk_assert(req != NK_NULL);
    nk_assert(res != NK_NULL);
    nk_req_reset(req);
    nk_msg_set_method_id(req, self->iid,
                         drone_controller_ServerConnectorInterface_SendRequest_mid);
    nk_msg_set_ncaps(req,
                     drone_controller_ServerConnectorInterface_SendRequest_req_handles);
    nk_req_reset(res);
    nk_msg_set_method_id(res, self->iid,
                         drone_controller_ServerConnectorInterface_SendRequest_mid);
    nk_msg_set_ncaps(res,
                     drone_controller_ServerConnectorInterface_SendRequest_res_handles);
    rc = nk_transport_call(self->transport,
                           &req->base_, req_arena,
                           &res->base_,
                           res_arena);
    return rc;
}
static inline
nk_err_t drone_controller_ServerConnectorInterface_PublishMessage_proxy(struct drone_controller_ServerConnectorInterface_proxy *self,
                                                                        struct drone_controller_ServerConnectorInterface_PublishMessage_req *req,
                                                                        const
                                                                        struct nk_arena *req_arena,
                                                                        struct drone_controller_ServerConnectorInterface_PublishMessage_res *res,
                                                                        struct nk_arena *res_arena)
{
    nk_err_t rc;
    
    nk_assert(self != NK_NULL);
    nk_assert(req != NK_NULL);
    nk_assert(res != NK_NULL);
    nk_req_reset(req);
    nk_msg_set_method_id(req, self->iid,
                         drone_controller_ServerConnectorInterface_PublishMessage_mid);
    nk_msg_set_ncaps(req,
                     drone_controller_ServerConnectorInterface_PublishMessage_req_handles);
    nk_req_reset(res);
    nk_msg_set_method_id(res, self->iid,
                         drone_controller_ServerConnectorInterface_PublishMessage_mid);
    nk_msg_set_ncaps(res,
                     drone_controller_ServerConnectorInterface_PublishMessage_res_handles);
    rc = nk_transport_call(self->transport,
                           &req->base_, req_arena,
                           &res->base_,
                           res_arena);
    return rc;
}
static inline
void drone_controller_ServerConnectorInterface_proxy_init(struct drone_controller_ServerConnectorInterface_proxy *self,
                                                          struct nk_transport *transport,
                                                          nk_iid_t iid)
{
    static const
    struct drone_controller_ServerConnectorInterface_ops
    ops = {NK_NULL, NK_NULL, NK_NULL};
    
    nk_assert(self != NK_NULL);
    self->base.ops = &ops;
    self->transport = transport;
    self->iid = iid;
}
static inline
nk_err_t drone_controller_ServerConnectorInterface_GetBoardId(struct drone_controller_ServerConnectorInterface *self,
                                                              struct drone_controller_ServerConnectorInterface_GetBoardId_req *req,
                                                              const
                                                              struct nk_arena *req_arena,
                                                              struct drone_controller_ServerConnectorInterface_GetBoardId_res *res,
                                                              struct nk_arena *res_arena)
{
    return drone_controller_ServerConnectorInterface_GetBoardId_proxy((struct drone_controller_ServerConnectorInterface_proxy *) self,
                                                                      req,
                                                                      req_arena,
                                                                      res,
                                                                      res_arena);
}
static inline
nk_err_t drone_controller_ServerConnectorInterface_SendRequest(struct drone_controller_ServerConnectorInterface *self,
                                                               struct drone_controller_ServerConnectorInterface_SendRequest_req *req,
                                                               const
                                                               struct nk_arena *req_arena,
                                                               struct drone_controller_ServerConnectorInterface_SendRequest_res *res,
                                                               struct nk_arena *res_arena)
{
    return drone_controller_ServerConnectorInterface_SendRequest_proxy((struct drone_controller_ServerConnectorInterface_proxy *) self,
                                                                       req,
                                                                       req_arena,
                                                                       res,
                                                                       res_arena);
}
static inline
nk_err_t drone_controller_ServerConnectorInterface_PublishMessage(struct drone_controller_ServerConnectorInterface *self,
                                                                  struct drone_controller_ServerConnectorInterface_PublishMessage_req *req,
                                                                  const
                                                                  struct nk_arena *req_arena,
                                                                  struct drone_controller_ServerConnectorInterface_PublishMessage_res *res,
                                                                  struct nk_arena *res_arena)
{
    return drone_controller_ServerConnectorInterface_PublishMessage_proxy((struct drone_controller_ServerConnectorInterface_proxy *) self,
                                                                          req,
                                                                          req_arena,
                                                                          res,
                                                                          res_arena);
}
#ifdef NK_USE_UNQUALIFIED_NAMES
#define ServerConnectorInterface_GetBoardId drone_controller_ServerConnectorInterface_GetBoardId
#define ServerConnectorInterface_SendRequest drone_controller_ServerConnectorInterface_SendRequest
#define ServerConnectorInterface_PublishMessage drone_controller_ServerConnectorInterface_PublishMessage
#define ServerConnectorInterface_proxy drone_controller_ServerConnectorInterface_proxy
#define ServerConnectorInterface_proxy_init drone_controller_ServerConnectorInterface_proxy_init
#endif /* NK_USE_UNQUALIFIED_NAMES */

#endif /* __drone_controller__ServerConnectorInterface__CLIENT__ */

#ifndef __drone_controller__ServerConnectorInterface__SERVER__
#define __drone_controller__ServerConnectorInterface__SERVER__
typedef union drone_controller_ServerConnectorInterface_req {
            struct nk_message base_;
            struct drone_controller_ServerConnectorInterface_GetBoardId_req GetBoardId;
            struct drone_controller_ServerConnectorInterface_SendRequest_req SendRequest;
            struct drone_controller_ServerConnectorInterface_PublishMessage_req PublishMessage;
        }
drone_controller_ServerConnectorInterface_req;
typedef union drone_controller_ServerConnectorInterface_res {
            struct nk_message base_;
            struct drone_controller_ServerConnectorInterface_GetBoardId_res GetBoardId;
            struct drone_controller_ServerConnectorInterface_SendRequest_res SendRequest;
            struct drone_controller_ServerConnectorInterface_PublishMessage_res PublishMessage;
        }
drone_controller_ServerConnectorInterface_res;
static inline
nk_err_t drone_controller_ServerConnectorInterface_interface_dispatch(struct drone_controller_ServerConnectorInterface *impl,
                                                                      nk_iid_t iid,
                                                                      const
                                                                      struct nk_message *req,
                                                                      const
                                                                      struct nk_arena *req_arena,
                                                                      struct nk_message *res,
                                                                      struct nk_arena *res_arena)
{
    nk_err_t rc = NK_ENOENT;
    nk_iid_t req_iid;
    nk_mid_t req_mid;
    
    nk_assert(impl != NK_NULL);
    nk_assert(req != NK_NULL);
    nk_assert(res != NK_NULL);
    nk_unused(impl);
    nk_unused(req_arena);
    nk_unused(res_arena);
    if (req->iid == iid) {
        req_iid = req->iid;
        req_mid = req->mid;
        switch (req->mid) {
            
          case drone_controller_ServerConnectorInterface_GetBoardId_mid:
            {
                struct drone_controller_ServerConnectorInterface_GetBoardId_res
                *res_ =
                (struct drone_controller_ServerConnectorInterface_GetBoardId_res *) res;
                
                /* Workaround GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101525 */
                #pragma GCC diagnostic push
                #pragma GCC diagnostic ignored "-Warray-bounds"
                (void) nk_memset(res_, 0,
                                 sizeof(*res_));
                #pragma GCC diagnostic pop
                rc = impl->ops->GetBoardId(impl,
                                           (const
                                            struct drone_controller_ServerConnectorInterface_GetBoardId_req *) req,
                                           req_arena,
                                           res_,
                                           res_arena);
                if (rc == NK_EOK) {
                    if (nk_msg_check_err(res)) {
                        nk_err_reset(&res_->err_);
                        nk_msg_set_ncaps(res_,
                                         drone_controller_ServerConnectorInterface_GetBoardId_err_handles);
                    } else {
                        nk_req_reset(&res_->res_);
                        nk_msg_set_ncaps(res_,
                                         drone_controller_ServerConnectorInterface_GetBoardId_res_handles);
                    }
                }
                break;
            }
            
          case drone_controller_ServerConnectorInterface_SendRequest_mid:
            {
                struct drone_controller_ServerConnectorInterface_SendRequest_res
                *res_ =
                (struct drone_controller_ServerConnectorInterface_SendRequest_res *) res;
                
                /* Workaround GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101525 */
                #pragma GCC diagnostic push
                #pragma GCC diagnostic ignored "-Warray-bounds"
                (void) nk_memset(res_, 0,
                                 sizeof(*res_));
                #pragma GCC diagnostic pop
                rc = impl->ops->SendRequest(impl,
                                            (const
                                             struct drone_controller_ServerConnectorInterface_SendRequest_req *) req,
                                            req_arena,
                                            res_,
                                            res_arena);
                if (rc == NK_EOK) {
                    if (nk_msg_check_err(res)) {
                        nk_err_reset(&res_->err_);
                        nk_msg_set_ncaps(res_,
                                         drone_controller_ServerConnectorInterface_SendRequest_err_handles);
                    } else {
                        nk_req_reset(&res_->res_);
                        nk_msg_set_ncaps(res_,
                                         drone_controller_ServerConnectorInterface_SendRequest_res_handles);
                    }
                }
                break;
            }
            
          case drone_controller_ServerConnectorInterface_PublishMessage_mid:
            {
                struct drone_controller_ServerConnectorInterface_PublishMessage_res
                *res_ =
                (struct drone_controller_ServerConnectorInterface_PublishMessage_res *) res;
                
                /* Workaround GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101525 */
                #pragma GCC diagnostic push
                #pragma GCC diagnostic ignored "-Warray-bounds"
                (void) nk_memset(res_, 0,
                                 sizeof(*res_));
                #pragma GCC diagnostic pop
                rc =
                    impl->ops->PublishMessage(impl,
                                              (const
                                               struct drone_controller_ServerConnectorInterface_PublishMessage_req *) req,
                                              req_arena,
                                              res_,
                                              res_arena);
                if (rc == NK_EOK) {
                    if (nk_msg_check_err(res)) {
                        nk_err_reset(&res_->err_);
                        nk_msg_set_ncaps(res_,
                                         drone_controller_ServerConnectorInterface_PublishMessage_err_handles);
                    } else {
                        nk_req_reset(&res_->res_);
                        nk_msg_set_ncaps(res_,
                                         drone_controller_ServerConnectorInterface_PublishMessage_res_handles);
                    }
                }
                break;
            }
            
          default:
            ;
        }
        res->iid = req_iid;
        res->mid = req_mid;
    }
    return rc;
}
#ifdef NK_USE_UNQUALIFIED_NAMES
#define ServerConnectorInterface_req drone_controller_ServerConnectorInterface_req
#define ServerConnectorInterface_res drone_controller_ServerConnectorInterface_res
#define ServerConnectorInterface_interface_dispatch drone_controller_ServerConnectorInterface_interface_dispatch
#endif /* NK_USE_UNQUALIFIED_NAMES */

#endif /* __drone_controller__ServerConnectorInterface__SERVER__ */

#ifdef __cplusplus
    }
#endif

#pragma GCC diagnostic pop

